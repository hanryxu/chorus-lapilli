{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","selectedMove","select","target","hint","step","setState","slice","length","thisMove","positions","calculateWinner","concat","Math","floor","j","abs","moveValid","status","current","winner","moves","map","move","desc","jumpTo","handleClick","style","position","bottom","href","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20ab7c5e.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      selectedMove: {\n        select: null,\n        target: null,\n      },\n      hint: null,\n    };\n  }\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const thisMove = this.state.xIsNext ? \"X\" : \"O\";\n    const positions = [\n      [\"upper\", \"middle\", \"lower\"],\n      [\"left\", \"middle\", \"right\"],\n    ];\n    if (calculateWinner(squares)) {\n      return;\n    }\n    // This should be where our new logic or chorus-lapilli comes in\n    if (this.state.stepNumber <= 5) {\n      if (squares[i] != null) return;\n      squares[i] = thisMove;\n      this.setState({\n        history: history.concat([\n          {\n            squares: squares,\n          },\n        ]),\n        stepNumber: history.length,\n        xIsNext: !this.state.xIsNext,\n        hint: null,\n      });\n    } else {\n      if (this.state.selectedMove.select === null) {\n        // selecting which to move\n        if (squares[i] !== thisMove) return;\n        this.setState({\n          selectedMove: {\n            select: i,\n            target: null,\n          },\n          hint:\n            \"selected \" +\n            thisMove +\n            \" at \" +\n            positions[0][Math.floor(i / 3)] +\n            \" \" +\n            positions[1][i % 3],\n        });\n      } else {\n        // selecting where to move\n        if (squares[i] !== null) {\n          this.setState({\n            selectedMove: { select: null, target: null },\n            hint:\n              \"Square at \" +\n              positions[0][Math.floor(i / 3)] +\n              \" \" +\n              positions[1][i % 3] +\n              \" occupied, cannot move there. Has reset selected \" +\n              thisMove,\n          });\n          return;\n        }\n        let j = i;\n        i = this.state.selectedMove.select;\n        if (moveValid(i, j)) {\n          squares[j] = thisMove;\n          squares[i] = null;\n        } else {\n          this.setState({\n            selectedMove: {\n              select: null,\n              target: null,\n            },\n            hint:\n              \"Cannot move \" +\n              thisMove +\n              \" from \" +\n              positions[0][Math.floor(i / 3)] +\n              \" \" +\n              positions[1][i % 3] +\n              \" to \" +\n              positions[0][Math.floor(j / 3)] +\n              \" \" +\n              positions[1][j % 3] +\n              \". Has reset selected \" +\n              thisMove\n          });\n          return;\n        }\n        if (\n          calculateWinner(squares) === null &&\n          squares[4] === thisMove &&\n          j !== 4\n        ) {\n          this.setState({\n            hint:\n              thisMove +\n              \" has a piece in middle middle but did not win, so invalid move.\",\n            selectedMove: {\n              select: null,\n              target: null,\n            },\n          });\n          return;\n        }\n        this.setState({\n          history: history.concat([\n            {\n              squares: squares,\n            },\n          ]),\n          stepNumber: history.length,\n          xIsNext: !this.state.xIsNext,\n          selectedMove: {\n            select: null,\n            target: null,\n          },\n          hint:\n            \"moved \" +\n            thisMove +\n            \" at \" +\n            positions[0][Math.floor(i / 3)] +\n            \" \" +\n            positions[1][i % 3] +\n            \" to \" +\n            positions[0][Math.floor(j / 3)] +\n            \" \" +\n            positions[1][j % 3],\n        });\n      }\n    }\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const hint = this.state.hint;\n    const moves = history.map((step, move) => {\n      // map((element, index) => { ... })\n      const desc = move ? \"Go to move #\" + move : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div>{hint}</div>\n          <ol>{moves}</ol>\n        </div>\n        <div className=\"game-rules\" style={{ position: \"fixed\", bottom: 0 }}>\n          <p>\n            Chorus lapilli is like{\" \"}\n            <a href=\"https://en.wikipedia.org/wiki/Tic-tac-toe\">tic-tac-toe</a>{\" \"}\n            in that players take turn placing pieces on a 3×3 board and the goal\n            is to get three pieces in a row. However, it differs from\n            tic-tac-toe in two ways:\n          </p>\n          <ul>\n            <li>\n              After your first three moves, instead of adding further pieces you\n              must instead move one of your existing pieces to an empty square\n              that is adjacent vertically, horizontally, or diagonally.\n              Therefore, after your third move you always occupy three squares.\n            </li>\n            <li>\n              If you have three pieces on the board and one of your pieces is in\n              the center square, you must either win or vacate the center square\n              in your next move.\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction moveValid(i, j) {\n  if (!(i >= 0 && i <= 8 && j >= 0 && j <= 8)) return false;\n  return (\n    Math.abs(Math.floor(i / 3) - Math.floor(j / 3)) <= 1 &&\n    Math.abs((i % 3) - (j % 3)) <= 1\n  );\n}\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}